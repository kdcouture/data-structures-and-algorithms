/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stacks_and_queues;

import org.junit.Before;
import org.junit.Test;

import javax.crypto.spec.OAEPParameterSpec;

import static org.junit.Assert.*;

public class LibraryTest {
    Stack testStack;
    Queue qTest;

    @Before public void testSetup(){
        testStack = new Stack<Integer>();
        qTest = new Queue<Integer>();
    }

    // STACK TESTS //
    @Test public void testStackConstruct() {
        assertNull(testStack.top);
    }

    @Test public void testStackPush() {
        testStack.push(1);
        assertEquals("1", 1, testStack.top.data);
    }

    @Test public void testStackPeek() {
        testStack.push(1);
        assertEquals("1",1, testStack.peek());
    }

    @Test public void testStackPop() {
        testStack.push(1);
        assertEquals("1", 1, testStack.pop());
    }

    @Test (expected = NullPointerException.class) public void testStackEmptyPop() {
        testStack.push(1);
        testStack.push(2);
        testStack.pop();
        testStack.pop();
        assertNull("Null", testStack.top);
        testStack.pop();
    }

    // END STACK TESTS //

    // QUEUE TESTS //
    @Test public void testQueueConstruct() {
        assertNull("null", qTest.front);
        assertNull("null", qTest.back);
    }

    @Test public void testQueueEnqueue() {
        qTest.enqueue(1);
        assertEquals("1",1,qTest.front.data);
    }

    @Test public void testQueueMultiEnqueue() {
        qTest.enqueue(1);
        qTest.enqueue(2);
        qTest.enqueue(3);
        qTest.enqueue(4);
        assertEquals("1",1, qTest.front.data);
    }

    @Test public void testQueueDequeue() {
        qTest.enqueue(1);
        qTest.dequeue();
        assertNull("null", qTest.front);
        assertNull("null", qTest.back);
    }

    @Test public void testQueueMultiDequeue() {
        qTest.enqueue(1);
        qTest.enqueue(2);
        qTest.enqueue(3);
        qTest.enqueue(4);
        qTest.dequeue();
        qTest.dequeue();
        qTest.dequeue();
        assertEquals("4", 4, qTest.front.data);
        assertEquals("4", 4, qTest.back.data);
    }

    @Test(expected = NullPointerException.class) public void testQueueDequeueEmpty() {
        // Should throw error, but it is expected and does not fail.
        qTest.dequeue();
    }

    @Test public void testQueuePeek() {
        qTest.enqueue(1);
        assertEquals("1",1, qTest.peek());
    }

    // END QUEUE TESTS //
}
