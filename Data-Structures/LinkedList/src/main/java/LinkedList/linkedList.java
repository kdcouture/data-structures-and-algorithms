/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package LinkedList;

class LinkedList<T> {
    // Data
    LinkedListNode head;

    // Constructor
    public LinkedList() {
        this.head = null;
    }

    // Methods

    public void append(T toAppend) {
        LinkedListNode cur = this.head;
        if(cur == null) {
            this.insert(toAppend);
            return;
        }
        while(cur.next != null) {
            cur = cur.next;
        }
        cur.next = new LinkedListNode(toAppend, null);
    }

    public void insertAfter(T toFind, T value) throws Exception {
        LinkedListNode cur;
        cur = this.head;
        while (cur != null) {
            if(cur.value.equals(toFind)) {
                // create and attach cur.next
                LinkedListNode newNode = new LinkedListNode(value, cur.next);
                // attach newNode after current.
                cur.next = newNode;
                return;
            }
            else {
                cur = cur.next;
            }
        }
        throw new Exception("Value not found");
    }

    public void insertBefore(T toFind, T value) throws Exception {
        LinkedListNode pre, cur;
        if(this.head.value.equals(toFind)){
            this.insert(value);
            return;
        }
        else {
            pre = this.head;
            cur = this.head;
            while (cur != null) {
                if(cur.value.equals(toFind)) {
                    // Create and set newNode's next to current
                    LinkedListNode newNode = new LinkedListNode(value, cur);
                    // set old prior to point to new node
                    pre.next = newNode;
                    return;
                }
                else {
                    pre = cur;
                    cur = cur.next;
                }
            }
        }
        throw new Exception("Value not found");
    }

    public void insert(T value) {
        this.head = new LinkedListNode(value, this.head);
    }

    public boolean includes(T target) {
        LinkedListNode cur = this.head;
        while(cur != null) {
            if(cur.value.equals(target)) {
                return true;
            }
            cur = cur.next;
        }
        return false;
    }

    public String toString() {
        String strBuild = "";
        if(this.head == null) {
            return "Empty Linked List";
        }
        LinkedListNode cur = this.head;
        while(cur.next != null) {
            strBuild += (cur.value.toString() + " ");
            cur = cur.next;
        }
        strBuild += cur.value.toString();
        return strBuild;
    }

}

class LinkedListNode<T>{
    // Data
    T value;
    LinkedListNode next;

    // Constructor
    public LinkedListNode(T value, LinkedListNode next) {
        this.value = value;
        this.next = next;
    }

    // Functions
    public boolean hasNext(){
        if(this.next != null) {
            return true;
        }
        return false;
    }
    // For Testing
    public boolean compareNodeValues(LinkedListNode compTo) {
        if(this.value.equals(compTo.value)) {
            return true;
        }
        return false;
    }
    public boolean compareValue(T compTo) {
        if(this.value == compTo) {
            return true;
        }
        return false;
    }

}
