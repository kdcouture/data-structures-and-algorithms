/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tree;

import java.util.ArrayList;

public class BST<T> extends BinaryTree<T> {
    public BST() {
        super();
    }

    public boolean contains(T data) {
        boolean isFound = false;
        TreeNode searchFor = new TreeNode(data);
        TreeNode itr = this.root;
        while(itr != null) {
            // Check current node data
            if(itr.compare(searchFor) == 0) {
                isFound = true;
                break;
            }
            // Look Left
            if(itr.compare(searchFor) >= -1) {
                itr = itr.left;
            }
            // Look Right
            else {
                itr = itr.right;
            }
        }

        return isFound;
    }

    @Override public void add(T data) {
        TreeNode newTreeNode = new TreeNode(data);
        if(this.root == null) {
            this.root = newTreeNode;
        }
        else {
            TreeNode itr = this.root;
            Boolean isPlaced = false;
            while (!isPlaced) {
                // Look Left
                if(itr.compare(newTreeNode) >= 1) {
                    if(itr.left == null) {
                        itr.left = newTreeNode;
                        isPlaced = true;
                    }
                    // Not place, keep moving
                    itr = itr.left;
                }
                // Look Right
                else {
                    if (itr.right == null) {
                        itr.right = newTreeNode;
                        isPlaced = true;
                    }
                    // Not place, keep moving
                    itr = itr.right;
                }
            }
        }
    }
}

