/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashTable;

import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;

import static org.junit.Assert.*;

public class LibraryTest {
    HashTable testHashMap;

    @Before
    public void testInit() {
        testHashMap = new HashTable(15);
    }
    @Test public void testConstruct() {
        for(int i = 0; i < 14; i++) {
            assertNull(testHashMap.map[i]);
        }
    }

    @Test
    public void testLeftJoin() {
        HashTable h2 = new HashTable(5);
        h2.add("0", "0-t2");
        h2.add("1", "1-t2");
        h2.add("2", "2-t2");
        h2.add("3", "3-t2");

        testHashMap.add("0", "0-t1");
        testHashMap.add("1", "1-t1");
        testHashMap.add("5", "2-t1");
        ArrayList<String[]> testStringArrayList = testHashMap.left_join(h2);
        String result = "";
        String expected = "[5, 2-t1, null]\n" +
                "[1, 1-t1, 1-t2]\n" +
                "[0, 0-t1, 0-t2]\n";
        for (String[] stringRow : testStringArrayList) {
            result += Arrays.toString(stringRow) + "\n";
        }
        assertEquals("should be the same", result, expected);
    }

    @Test
    public void testAddAndContains() {
        testHashMap.add("0", "testValue");
        assertFalse(testHashMap.contains("Not in there"));
        assertTrue(testHashMap.contains("0"));
    }

    @Test
    public void testGet() {
        testHashMap.add("0", "testValue");
        assertEquals("testValue", testHashMap.get("0"), "testValue");
        testHashMap.add("1", "test1");
        testHashMap.add("2", "test2");
        testHashMap.add("3", "test3");
        testHashMap.add("4", "test4");
        assertEquals("test(n)", testHashMap.get("1"), "test1");
        assertEquals("test(n)", testHashMap.get("2"), "test2");
        assertEquals("test(n)", testHashMap.get("3"), "test3");
    }

    @Test
    public void testCollisions() {
        HashTable testSmallMap = new HashTable(1);
        testSmallMap.add("0", "0");
        testSmallMap.add("2", "2");
        testSmallMap.add("1", "1");
        assertTrue(testSmallMap.contains("0"));
        assertTrue(testSmallMap.contains("1"));
        assertTrue(testSmallMap.contains("2"));
    }

    @Test (expected = IllegalArgumentException.class)
    public void testMultiKeyAdd() {
        testHashMap.add("0", "0");
        testHashMap.add("0", "0");
    }
}
